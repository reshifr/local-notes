#!/usr/bin/env bash

EXIT_SUCCESS=0
EXIT_FAILURE=1
HELP_REGEX='(^\-h$|^\-\-(h$|he$|hel$|help$))'

rand() { # ( length... )
  openssl rand -hex "$1"
}

blake2b512() { # ( file )
  openssl blake2b512 "$1" 2> /dev/null | sed "s|BLAKE2B-512($1)= ||"
}

DB_DIR=.
PERMS=+rw
CACHE="$DB_DIR/cache.db"
PUBLIC_DIR='/tmp'
PRIVATE_DIR="$DB_DIR/.log"
FILE_ID="$(rand 32)"
FILE_TMP="$PUBLIC_DIR/tmp-$FILE_ID"
FILE_ENCRYPT="$PUBLIC_DIR/encrypt-$FILE_ID"
FILE_DECRYPT="$PRIVATE_DIR/decrypt-$FILE_ID"
MAGIC_NUMBER=174487
CACHE_TABLE_SCHEMA="\
key|TEXT|0||1
timestamp|DATETIME|0|CURRENT_TIMESTAMP|0
value|TEXT|0||0"
CACHE_INDEX_SCHEMA="\
cache_timestamp_index|0|c|0
cache_value_index|0|c|0"
CACHE_HELP="\
Penggunaan: cache [COMMAND KEY] [ARG]...
Simpan informasi kunci-nilai.

Commands:
  -i    menyisipkan nilai.
  -r    menempatkan nilai.
  -v    menampilkan nilai.
  -d    menghapus nilai.
  -e    mengeksekusi nilai.
  -k    menampilkan kunci.
  -fk   menampilkan waktu dan kunci.
  -f    menampilkan waktu, kunci, dan nilai.
  -E    menyisipkan nilai yang terenkripsi.
  -Er   menempatkan nilai yang terenkripsi.
  -D    menampilkan kunci, dan nilai yang terdeskripsi.
  -Dv   menampilkan nilai yang terdeskripsi.
  -De   mengeksekusi nilai yang terdeskripsi.

Contoh:
  cache --help
  cache -r 'kode' 'ds87UskYS760s7adNisa7JUknd8'
  cache -v 'kunci'
  cache -d 'kunci'

Email: <reshifr@gmail.com>
Github: <https://github.com/reshifr>"

success_message() { # ( msg... )
  for arg in "$@"; do
    printf "$arg\n"
  done
  exit "$EXIT_SUCCESS"
}

failure_message() { # ( msg... )
  for arg in "$@"; do
    printf "$arg\n" >&2
  done
  exit "$EXIT_FAILURE"
}

cache_failed() {
  failure_message \
    'Kesalahan akses' \
    'Program tidak memiliki akses untuk mengakses database.'
}

log_failed() {
  failure_message \
    'Kesalahan akses' \
    'Program tidak memiliki akses untuk mengakses log data.'
}

cache_init() {
  # hapus CACHE
  rm -rf "$CACHE" &> /dev/null || cache_failed
  # ubah permission CACHE
  if [ ! -r "$CACHE" ] || [ ! -w "$CACHE" ]; then
    touch "$CACHE" &> /dev/null || cache_failed
    chmod "$PERMS" "$CACHE" &> /dev/null || cache_failed
  fi
  # buat tabel cache
  sqlite3 "$CACHE" '
    CREATE TABLE IF NOT EXISTS cache(
      key TEXT PRIMARY KEY,
      value TEXT,
      timestamp DATETIME
      DEFAULT CURRENT_TIMESTAMP
    )' &> /dev/null
  # buat index cache(value)
  sqlite3 "$CACHE" '
    CREATE INDEX IF NOT EXISTS cache_value_index
    ON cache(value)' &> /dev/null
  # buat index cache(timestamp)
  sqlite3 "$CACHE" '
    CREATE INDEX IF NOT EXISTS cache_timestamp_index
    ON cache(timestamp)' &> /dev/null
}

cache_handle() {
  # buat CACHE
  [ ! -f "$CACHE" ] && cache_init
  # cek integrity CACHE
  sqlite3 "$CACHE" 'PRAGMA INTEGRITY_CHECK' &> /dev/null || cache_init
  # cek schema dalam CACHE
  local cache_table_schema=$(
    sqlite3 "$CACHE" '
      SELECT name, type, "notnull", dflt_value, pk
      FROM pragma_table_info("cache")
      ORDER BY name ASC' 2> /dev/null)
  local cache_index_schema=$(
    sqlite3 "$CACHE" '
      SELECT name, "unique", origin, partial
      FROM pragma_index_list("cache")
      WHERE name LIKE "cache%index"
      ORDER BY name ASC' 2> /dev/null)
  [ "$cache_table_schema" = "$CACHE_TABLE_SCHEMA" ] &&
  [ "$cache_index_schema" = "$CACHE_INDEX_SCHEMA" ] || cache_init
}

cache_insert() { # ( key, value )
  sqlite3 "$CACHE" "
    REPLACE INTO cache(key, value)
    VALUES('$1', '$2')"
}

cache_get() { # ( key )
  sqlite3 "$CACHE" -separator '' "
    SELECT value
    FROM cache
    WHERE key = '$key'"
}

cache_find() { # ( key )
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;33m%s%c[0m',
        CHAR(27), key, CHAR(27)) || CHAR(10),
      value || CHAR(10)
    FROM cache
    WHERE key = '$1'
    ORDER BY key DESC" | head -c -1
}

cache_lookup() { # ( key )
  local status=$(
    sqlite3 "$CACHE" -separator '' "
      SELECT key
      FROM cache
      WHERE key = '$key'" 2> /dev/null)
  [ -n "$status" ] && return "$EXIT_SUCCESS"
  return "$EXIT_FAILURE"
}

cache_key_select() { # ( infixes )
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;33m%s%c[0m',
        CHAR(27), key, CHAR(27))
    FROM cache
    WHERE key LIKE '%$1%' ESCAPE '\'
    OR value LIKE '%$1%' ESCAPE '\'
    ORDER BY key DESC"
}

cache_select() { # ( infixes )
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;33m%s%c[0m',
        CHAR(27), key, CHAR(27)) || CHAR(10),
      value || CHAR(10)
    FROM cache
    WHERE key LIKE '%$1%' ESCAPE '\'
    OR value LIKE '%$1%' ESCAPE '\'
    ORDER BY key DESC" | head -c -1
}

cache_full_key_select() { # ( infixes )
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;36m%s%c[0m', CHAR(27),
        strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
        CHAR(27)) || CHAR(10),
      PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10)
    FROM cache
    WHERE key LIKE '%$1%' ESCAPE '\'
    OR value LIKE '%$1%' ESCAPE '\'
    ORDER BY key DESC" | head -c -1
}

cache_full_select() { # ( infixes )
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;36m%s%c[0m', CHAR(27),
        strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
        CHAR(27)) || CHAR(10),
      PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10),
      value || CHAR(10)
    FROM cache
    WHERE key LIKE '%$1%' ESCAPE '\'
    OR value LIKE '%$1%' ESCAPE '\'
    ORDER BY key DESC" | head -c -1
}

cache_key_all() {
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;33m%s%c[0m',
        CHAR(27), key, CHAR(27))
    FROM cache
    ORDER BY key DESC"
}

cache_all() {
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;33m%s%c[0m',
        CHAR(27), key, CHAR(27)) || CHAR(10),
      value || CHAR(10)
    FROM cache
    ORDER BY key DESC" | head -c -1
}

cache_full_key_all() {
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;36m%s%c[0m', CHAR(27),
        strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
        CHAR(27)) || CHAR(10),
      PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10)
    FROM cache
    ORDER BY key DESC" | head -c -1
}

cache_full_all() {
  sqlite3 "$CACHE" -separator '' "
    SELECT
      PRINTF('%c[1;36m%s%c[0m', CHAR(27),
        strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
        CHAR(27)) || CHAR(10),
      PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10),
      value || CHAR(10)
    FROM cache
    ORDER BY key DESC" | head -c -1
}

cache_delete() { # ( key )
  sqlite3 "$CACHE" "
    DELETE FROM cache
    WHERE key = '$1'"
}

log_handle() {
  # buat PUBLIC_DIR
  if [ ! -d "$PUBLIC_DIR" ]; then
    mkdir -m "$PERMS" -p "$PUBLIC_DIR" &> /dev/null || log_failed
  fi
  # buat PRIVATE_DIR
  if [ ! -d "$PRIVATE_DIR" ]; then
    mkdir -m "$PERMS" -p "$PRIVATE_DIR" &> /dev/null || log_failed
  fi
}

clean() {
  # bersihkan PUBLIC_DIR
  find "$PUBLIC_DIR" 2> /dev/null |
  grep -E '[tmp|encrypt]-[0-9a-f]{64}$' | parallel rm -rf '{}' &> /dev/null
  # bersihkan PRIVATE_DIR
  find "$PRIVATE_DIR" 2> /dev/null |
  grep -E 'decrypt-[0-9a-f]{64}$' | parallel shred -fuz '{}' &> /dev/null
}

encrypt() {
  openssl aes-256-cbc -a -e -pbkdf2 -iter "$MAGIC_NUMBER" \
    -in "$FILE_DECRYPT" -out "$FILE_ENCRYPT" 2> /dev/null
}

decrypt() {
  openssl aes-256-cbc -a -d -pbkdf2 -iter "$MAGIC_NUMBER" \
    -in "$FILE_ENCRYPT" -out "$FILE_DECRYPT" 2> /dev/null
}

cache_handle
log_handle
grep -Eo "$HELP_REGEX" <<< "$1" &> /dev/null && success_message "$CACHE_HELP"
# ubah <'> ke <''>
# ubah [:blank:] ke [:space:]
key=$(sed "s/'/''/g" <<< "$2" | sed ':a;N;$!ba; s/\s\+/ /g')

case "$1" in
  -i)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -i KEY' sebagai contoh."
    if cache_lookup "$key"; then
      cache_get "$key" > "$FILE_TMP"
      hvold=$(blake2b512 "$FILE_TMP")
      nano "$FILE_TMP"
      hvnew=$(blake2b512 "$FILE_TMP")
      if [ "$hvold" == "$hvnew" ]; then
        clean
        exit "$EXIT_SUCCESS"
      fi
    else
      nano "$FILE_TMP"
    fi
    [ ! -f "$FILE_TMP" ] && exit "$EXIT_SUCCESS"
    # ubah <'> ke <''>
    # ubah <\n> ke <' || CHAR(10) || '>
    sed -i "s/'/''/g" "$FILE_TMP"
    sed -i -e ':a;N;$!ba' -e "s/\n/' || CHAR(10) || '/g" "$FILE_TMP"
    cache_insert "$key" "$(cat "$FILE_TMP")"
    cache_find "$key"
    clean
  ;;
  -r)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -r KEY [ARG]...' sebagai contoh."
    if (( "$#" > 2 )); then
      # ubah <'> ke <''>
      # ubah <\n> ke <' || CHAR(10) || '>
      value=$(
        sed "s/'/''/g" <<< "${*:3}" |
        sed -e ':a;N;$!ba' -e "s/\n/' || CHAR(10) || '/g")
      cache_insert "$key" "$value"
      cache_find "$key"
    else
      nano "$FILE_TMP"
      [ ! -f "$FILE_TMP" ] && exit "$EXIT_SUCCESS"
      # ubah <'> ke <''>
      # ubah <\n> ke <' || CHAR(10) || '>
      sed -i "s/'/''/g" "$FILE_TMP"
      sed -i -e ':a;N;$!ba' -e "s/\n/' || CHAR(10) || '/g" "$FILE_TMP"
      cache_insert "$key" "$(cat "$FILE_TMP")"
      cache_find "$key"
      clean
    fi
  ;;
  -v)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -v KEY' sebagai contoh."
    cache_get "$key"
  ;;
  -e)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -e KEY [ARG]...' sebagai contoh."
    bash -c "$(cache_get "$key")" "${@:2}"
  ;;
  -d)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -d KEY' sebagai contoh."
    cache_find "$key"
    cache_delete "$key"
  ;;
  -E)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -E KEY' sebagai contoh."
    if cache_lookup "$key"; then
      cache_get "$key" > "$FILE_ENCRYPT"
      decrypt
      rm -f "$FILE_ENCRYPT"
      [ ! -f "$FILE_DECRYPT" ] && exit "$EXIT_SUCCESS"
      hvold=$(blake2b512 "$FILE_DECRYPT")
      nano "$FILE_DECRYPT"
      hvnew=$(blake2b512 "$FILE_DECRYPT")
      if [ "$hvold" == "$hvnew" ]; then
        clean
        exit "$EXIT_SUCCESS"
      fi
    else
      nano "$FILE_DECRYPT"
    fi
    [ ! -f "$FILE_DECRYPT" ] && exit "$EXIT_SUCCESS"
    encrypt
    if [ -f "$FILE_ENCRYPT" ]; then
      clear
      printf '\033[1;34mENCRYPTED\n\033[0m'
      cache_insert "$key" "$(cat "$FILE_ENCRYPT")"
      cache_find "$key"
    fi
    clean
  ;;
  -Er)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -Er KEY' sebagai contoh."
    nano "$FILE_DECRYPT"
    [ ! -f "$FILE_DECRYPT" ] && exit "$EXIT_SUCCESS"
    encrypt
    if [ -f "$FILE_ENCRYPT" ]; then
      clear
      printf '\033[1;34mENCRYPTED\n\033[0m'
      cache_insert "$key" "$(cat "$FILE_ENCRYPT")"
      cache_find "$key"
    fi
    clean
  ;;
  -D)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -D KEY' sebagai contoh."
    cache_get "$key" > "$FILE_ENCRYPT"
    decrypt
    if [ -f "$FILE_DECRYPT" ]; then
      clear
      printf '\033[1;31mDECRYPTED\n\033[0m'
      printf '\033[1;33m%s\n\033[0m' "$key"
      cat "$FILE_DECRYPT"
    fi
    clean
  ;;
  -Dv)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -Dv KEY' sebagai contoh."
    cache_get "$key" > "$FILE_ENCRYPT"
    decrypt
    [ -f "$FILE_DECRYPT" ] && cat "$FILE_DECRYPT"
    clean
  ;;
  -De)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -De KEY [ARG]...' sebagai contoh."
    cache_get "$key" > "$FILE_ENCRYPT"
    decrypt
    [ -f "$FILE_DECRYPT" ] && bash -c "$(cat "$FILE_DECRYPT")" "${@:2}"
    ret=$?
    clean
    exit "$ret"
  ;;
  -k)
    if (( "$#" > 1 )); then
      # ubah <'> ke <''>
      # ubah <\> ke <\\>
      # ubah <%> ke <\%>
      # ubah <_> ke <\_>
      # ubah [:blank:] ke [:space:]
      infixes=$(
        sed -e "s/'/''/g" -e 's/\\/\\\\/g' -e 's/%/\\%/g' \
          -e 's/_/\\_/g' <<< "${*:2}" | sed ':a;N;$!ba; s/\s\+/ /g')
      cache_key_select "$infixes"
    else
      cache_key_all
    fi
  ;;
  -fk)
    if (( "$#" > 1 )); then
      # ubah <'> ke <''>
      # ubah <\> ke <\\>
      # ubah <%> ke <\%>
      # ubah <_> ke <\_>
      # ubah [:blank:] ke [:space:]
      infixes=$(
        sed -e "s/'/''/g" -e 's/\\/\\\\/g' -e 's/%/\\%/g' \
          -e 's/_/\\_/g' <<< "${*:2}" | sed ':a;N;$!ba; s/\s\+/ /g')
      cache_full_key_select "$infixes"
    else
      cache_full_key_all
    fi
  ;;
  -f)
    if (( "$#" > 1 )); then
      # ubah <'> ke <''>
      # ubah <\> ke <\\>
      # ubah <%> ke <\%>
      # ubah <_> ke <\_>
      # ubah [:blank:] ke [:space:]
      infixes=$(
        sed -e "s/'/''/g" -e 's/\\/\\\\/g' -e 's/%/\\%/g' \
          -e 's/_/\\_/g' <<< "${*:2}" | sed ':a;N;$!ba; s/\s\+/ /g')
      cache_full_select "$infixes"
    else
      cache_full_all
    fi
  ;;
  *)
    if (( "$#" > 0 )); then
      # ubah <'> ke <''>
      # ubah <\> ke <\\>
      # ubah <%> ke <\%>
      # ubah <_> ke <\_>
      # ubah [:blank:] ke [:space:]
      infixes=$(
        sed -e "s/'/''/g" -e 's/\\/\\\\/g' -e 's/%/\\%/g' \
          -e 's/_/\\_/g' <<< "$*" | sed ':a;N;$!ba; s/\s\+/ /g')
      cache_select "$infixes"
    else
      cache_all
    fi
  ;;
esac

#!/bin/bash

EXIT_SUCCESS=0
EXIT_FAILURE=1

HELP_REGEX='(^\-h$|^\-\-(h$|he$|hel$|help$))'

DB_DIR=.
CACHE="$DB_DIR/cache.db"
CACHE_PERMS=+rw
CACHE_TABLE_SCHEMA="\
key|TEXT|0||1
timestamp|DATETIME|0|CURRENT_TIMESTAMP|0
value|TEXT|0||0"
CACHE_INDEX_SCHEMA="\
cache_timestamp_index|0|c|0
cache_value_index|0|c|0"

CACHE_HELP="\
Penggunaan: cache [COMMAND KEY [VALUE]...] [INFIXES]...
Simpan informasi kunci-nilai.

Commands:
  -i    menyisipkan data.
  -v    memperoleh nilai.
  -d    menghapus data.
  -f    menampilkan informasi penuh.

Contoh:
  cache --help
  cache -i 'kode' 'ds87UskYS760s7adNisa7JUknd8'

Email: <reshifr@gmail.com>
Github: <https://github.com/reshifr>"

success_message() { # ( msg... )
  for arg in "$@"; do
    printf "$arg\n"
  done
  exit "$EXIT_SUCCESS"
}

failure_message() { # ( msg... )
  for arg in "$@"; do
    printf "$arg\n" >&2
  done
  exit "$EXIT_FAILURE"
}

cache_failed() {
  failure_message \
    'Kesalahan akses' \
    'Program tidak memiliki akses untuk mengakses database.'
}

cache_init() {
  # hapus CACHE
  rm -rf "$CACHE" &> /dev/null || cache_failed
  # ubah permission CACHE
  if [ ! -r "$CACHE" ] || [ ! -w "$CACHE" ]; then
    touch "$CACHE" &> /dev/null || cache_failed
    chmod "$CACHE_PERMS" "$CACHE" &> /dev/null || cache_failed
  fi
  # buat tabel cache
  sqlite3 "$CACHE" '
    CREATE TABLE IF NOT EXISTS cache(
      key TEXT PRIMARY KEY,
      value TEXT,
      timestamp DATETIME
      DEFAULT CURRENT_TIMESTAMP
    )' &> /dev/null
  # buat index cache(value)
  sqlite3 "$CACHE" '
    CREATE INDEX IF NOT EXISTS cache_value_index
    ON cache(value)' &> /dev/null
  # buat index cache(timestamp)
  sqlite3 "$CACHE" '
    CREATE INDEX IF NOT EXISTS cache_timestamp_index
    ON cache(timestamp)' &> /dev/null
}

cache_handle() {
  # buat CACHE
  [ ! -f "$CACHE" ] && cache_init
  # cek integrity CACHE
  sqlite3 "$CACHE" 'PRAGMA INTEGRITY_CHECK' &> /dev/null || cache_init
  # cek schema dalam CACHE
  local cache_table_schema=$(
    sqlite3 "$CACHE" '
      SELECT name, type, "notnull", dflt_value, pk
      FROM pragma_table_info("cache")
      ORDER BY name ASC' 2> /dev/null)
  local cache_index_schema=$(
    sqlite3 "$CACHE" '
      SELECT name, "unique", origin, partial
      FROM pragma_index_list("cache")
      WHERE name LIKE "cache%index"
      ORDER BY name ASC' 2> /dev/null)
  [ "$cache_table_schema" = "$CACHE_TABLE_SCHEMA" ] &&
  [ "$cache_index_schema" = "$CACHE_INDEX_SCHEMA" ] || cache_init
}

cache_handle
grep -Eo "$HELP_REGEX" <<< "$1" &> /dev/null && success_message "$CACHE_HELP"
key=$(sed "s/'/''/g" <<< "$2")
value=$(sed "s/'/''/g" <<< "${*:3}")

case "$1" in
  -i)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -i KEY [VALUE]...' sebagai contoh."
    sqlite3 "$CACHE" "
      REPLACE INTO cache
      VALUES('$key', '$value')" &> /dev/null
    sqlite3 "$CACHE" -separator '' "
      SELECT key || CHAR(10), value
      FROM cache
      WHERE key = '$key'" &> /dev/null
  ;;
  -v)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -v KEY' sebagai contoh."
    sqlite3 "$CACHE" -separator '' "
      SELECT value
      FROM cache
      WHERE key = '$key'" 2> /dev/null
  ;;
  -d)
    [ -z "$2" ] &&
    failure_message \
      'Kunci tidak didefinisikan' \
      "Gunakan 'cache -d KEY' sebagai contoh."
    sqlite3 "$CACHE" "
      DELETE FROM cache
      WHERE key = '$key'" &> /dev/null
  ;;
  -f)
    if (( "$#" > 1 )); then
      infixes=$(
        sed -e 's/\\/\\\\/g' -e "s/'/''/g" \
          -e 's/%/\\%/g; s/_/\\_/g' <<< "${*:2}")
      sqlite3 "$CACHE" -separator '' "
        SELECT
          PRINTF('%c[1;36m%s%c[0m', CHAR(27),
            strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
            CHAR(27)) || CHAR(10),
          PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10),
          value || CHAR(10)
        FROM cache
        WHERE key LIKE '%$infixes%' ESCAPE '\'
        OR value LIKE '%$infixes%' ESCAPE '\'
        ORDER BY key ASC" 2> /dev/null | head -c -1
    else
      sqlite3 "$CACHE" -separator '' "
        SELECT
          PRINTF('%c[1;36m%s%c[0m', CHAR(27),
            strftime('%H:%M %d-%m-%Y', datetime(timestamp,'localtime')),
            CHAR(27)) || CHAR(10),
          PRINTF('%c[1;33m%s%c[0m', CHAR(27), key, CHAR(27)) || CHAR(10),
          value || CHAR(10)
        FROM cache
        ORDER BY key ASC" 2> /dev/null | head -c -1
    fi
  ;;
  *)
    if (( "$#" > 0 )); then
      infixes=$(
        sed -e 's/\\/\\\\/g' -e "s/'/''/g" \
          -e 's/%/\\%/g; s/_/\\_/g' <<< "${*:1}")
      sqlite3 "$CACHE" -separator '' "
        SELECT
          PRINTF('%c[1;33m%s%c[0m',
            CHAR(27), key, CHAR(27)) || CHAR(10),
          value || CHAR(10)
        FROM cache
        WHERE key LIKE '%$infixes%' ESCAPE '\'
        OR value LIKE '%$infixes%' ESCAPE '\'
        ORDER BY key ASC" 2> /dev/null | head -c -1
    else
      sqlite3 "$CACHE" -separator '' "
        SELECT
          PRINTF('%c[1;33m%s%c[0m',
            CHAR(27), key, CHAR(27)) || CHAR(10),
          value || CHAR(10)
        FROM cache
        ORDER BY key ASC" 2> /dev/null | head -c -1
    fi
  ;;
esac
